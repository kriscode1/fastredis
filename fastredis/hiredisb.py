# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hiredisb')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hiredisb')
    _hiredisb = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hiredisb', [dirname(__file__)])
        except ImportError:
            import _hiredisb
            return _hiredisb
        try:
            _mod = imp.load_module('_hiredisb', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hiredisb = swig_import_helper()
    del swig_import_helper
else:
    import _hiredisb
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class redisReply_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisReply_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisReply_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _hiredisb.redisReply_b_type_set
    __swig_getmethods__["type"] = _hiredisb.redisReply_b_type_get
    if _newclass:
        type = _swig_property(_hiredisb.redisReply_b_type_get, _hiredisb.redisReply_b_type_set)
    __swig_setmethods__["integer"] = _hiredisb.redisReply_b_integer_set
    __swig_getmethods__["integer"] = _hiredisb.redisReply_b_integer_get
    if _newclass:
        integer = _swig_property(_hiredisb.redisReply_b_integer_get, _hiredisb.redisReply_b_integer_set)
    __swig_setmethods__["len"] = _hiredisb.redisReply_b_len_set
    __swig_getmethods__["len"] = _hiredisb.redisReply_b_len_get
    if _newclass:
        len = _swig_property(_hiredisb.redisReply_b_len_get, _hiredisb.redisReply_b_len_set)
    __swig_setmethods__["str"] = _hiredisb.redisReply_b_str_set
    __swig_getmethods__["str"] = _hiredisb.redisReply_b_str_get
    if _newclass:
        str = _swig_property(_hiredisb.redisReply_b_str_get, _hiredisb.redisReply_b_str_set)
    __swig_setmethods__["elements"] = _hiredisb.redisReply_b_elements_set
    __swig_getmethods__["elements"] = _hiredisb.redisReply_b_elements_get
    if _newclass:
        elements = _swig_property(_hiredisb.redisReply_b_elements_get, _hiredisb.redisReply_b_elements_set)
    __swig_setmethods__["element"] = _hiredisb.redisReply_b_element_set
    __swig_getmethods__["element"] = _hiredisb.redisReply_b_element_get
    if _newclass:
        element = _swig_property(_hiredisb.redisReply_b_element_get, _hiredisb.redisReply_b_element_set)

    def __init__(self):
        this = _hiredisb.new_redisReply_b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredisb.delete_redisReply_b
    __del__ = lambda self: None
redisReply_b_swigregister = _hiredisb.redisReply_b_swigregister
redisReply_b_swigregister(redisReply_b)


def replies_index_b(replies, index):
    return _hiredisb.replies_index_b(replies, index)
replies_index_b = _hiredisb.replies_index_b
class redisContext_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisContext_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisContext_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["err"] = _hiredisb.redisContext_b_err_set
    __swig_getmethods__["err"] = _hiredisb.redisContext_b_err_get
    if _newclass:
        err = _swig_property(_hiredisb.redisContext_b_err_get, _hiredisb.redisContext_b_err_set)
    __swig_setmethods__["errstr"] = _hiredisb.redisContext_b_errstr_set
    __swig_getmethods__["errstr"] = _hiredisb.redisContext_b_errstr_get
    if _newclass:
        errstr = _swig_property(_hiredisb.redisContext_b_errstr_get, _hiredisb.redisContext_b_errstr_set)
    __swig_setmethods__["fd"] = _hiredisb.redisContext_b_fd_set
    __swig_getmethods__["fd"] = _hiredisb.redisContext_b_fd_get
    if _newclass:
        fd = _swig_property(_hiredisb.redisContext_b_fd_get, _hiredisb.redisContext_b_fd_set)
    __swig_setmethods__["flags"] = _hiredisb.redisContext_b_flags_set
    __swig_getmethods__["flags"] = _hiredisb.redisContext_b_flags_get
    if _newclass:
        flags = _swig_property(_hiredisb.redisContext_b_flags_get, _hiredisb.redisContext_b_flags_set)
    __swig_setmethods__["obuf"] = _hiredisb.redisContext_b_obuf_set
    __swig_getmethods__["obuf"] = _hiredisb.redisContext_b_obuf_get
    if _newclass:
        obuf = _swig_property(_hiredisb.redisContext_b_obuf_get, _hiredisb.redisContext_b_obuf_set)
    __swig_setmethods__["reader"] = _hiredisb.redisContext_b_reader_set
    __swig_getmethods__["reader"] = _hiredisb.redisContext_b_reader_get
    if _newclass:
        reader = _swig_property(_hiredisb.redisContext_b_reader_get, _hiredisb.redisContext_b_reader_set)
    __swig_setmethods__["connection_type"] = _hiredisb.redisContext_b_connection_type_set
    __swig_getmethods__["connection_type"] = _hiredisb.redisContext_b_connection_type_get
    if _newclass:
        connection_type = _swig_property(_hiredisb.redisContext_b_connection_type_get, _hiredisb.redisContext_b_connection_type_set)
    __swig_setmethods__["timeout"] = _hiredisb.redisContext_b_timeout_set
    __swig_getmethods__["timeout"] = _hiredisb.redisContext_b_timeout_get
    if _newclass:
        timeout = _swig_property(_hiredisb.redisContext_b_timeout_get, _hiredisb.redisContext_b_timeout_set)
    __swig_getmethods__["tcp_b"] = _hiredisb.redisContext_b_tcp_b_get
    if _newclass:
        tcp_b = _swig_property(_hiredisb.redisContext_b_tcp_b_get)
    __swig_getmethods__["unix_sock_b"] = _hiredisb.redisContext_b_unix_sock_b_get
    if _newclass:
        unix_sock_b = _swig_property(_hiredisb.redisContext_b_unix_sock_b_get)

    def __init__(self):
        this = _hiredisb.new_redisContext_b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredisb.delete_redisContext_b
    __del__ = lambda self: None
redisContext_b_swigregister = _hiredisb.redisContext_b_swigregister
redisContext_b_swigregister(redisContext_b)

class redisContext_b_unix_sock_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisContext_b_unix_sock_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisContext_b_unix_sock_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _hiredisb.redisContext_b_unix_sock_b_path_set
    __swig_getmethods__["path"] = _hiredisb.redisContext_b_unix_sock_b_path_get
    if _newclass:
        path = _swig_property(_hiredisb.redisContext_b_unix_sock_b_path_get, _hiredisb.redisContext_b_unix_sock_b_path_set)

    def __init__(self):
        this = _hiredisb.new_redisContext_b_unix_sock_b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredisb.delete_redisContext_b_unix_sock_b
    __del__ = lambda self: None
redisContext_b_unix_sock_b_swigregister = _hiredisb.redisContext_b_unix_sock_b_swigregister
redisContext_b_unix_sock_b_swigregister(redisContext_b_unix_sock_b)

class redisContext_b_tcp_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisContext_b_tcp_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisContext_b_tcp_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["host"] = _hiredisb.redisContext_b_tcp_b_host_set
    __swig_getmethods__["host"] = _hiredisb.redisContext_b_tcp_b_host_get
    if _newclass:
        host = _swig_property(_hiredisb.redisContext_b_tcp_b_host_get, _hiredisb.redisContext_b_tcp_b_host_set)
    __swig_setmethods__["source_addr"] = _hiredisb.redisContext_b_tcp_b_source_addr_set
    __swig_getmethods__["source_addr"] = _hiredisb.redisContext_b_tcp_b_source_addr_get
    if _newclass:
        source_addr = _swig_property(_hiredisb.redisContext_b_tcp_b_source_addr_get, _hiredisb.redisContext_b_tcp_b_source_addr_set)
    __swig_setmethods__["port"] = _hiredisb.redisContext_b_tcp_b_port_set
    __swig_getmethods__["port"] = _hiredisb.redisContext_b_tcp_b_port_get
    if _newclass:
        port = _swig_property(_hiredisb.redisContext_b_tcp_b_port_get, _hiredisb.redisContext_b_tcp_b_port_set)

    def __init__(self):
        this = _hiredisb.new_redisContext_b_tcp_b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredisb.delete_redisContext_b_tcp_b
    __del__ = lambda self: None
redisContext_b_tcp_b_swigregister = _hiredisb.redisContext_b_tcp_b_swigregister
redisContext_b_tcp_b_swigregister(redisContext_b_tcp_b)


def redisConnect_b(ip, port):
    return _hiredisb.redisConnect_b(ip, port)
redisConnect_b = _hiredisb.redisConnect_b

def redisConnectWithTimeout_b(ip, port, tv):
    return _hiredisb.redisConnectWithTimeout_b(ip, port, tv)
redisConnectWithTimeout_b = _hiredisb.redisConnectWithTimeout_b

def redisCommand_b(c, format):
    return _hiredisb.redisCommand_b(c, format)
redisCommand_b = _hiredisb.redisCommand_b

def freeReplyObject_b(reply):
    return _hiredisb.freeReplyObject_b(reply)
freeReplyObject_b = _hiredisb.freeReplyObject_b

def redisFree_b(c):
    return _hiredisb.redisFree_b(c)
redisFree_b = _hiredisb.redisFree_b

def redisAppendCommand_b(c, format):
    return _hiredisb.redisAppendCommand_b(c, format)
redisAppendCommand_b = _hiredisb.redisAppendCommand_b
class redisReplyOut_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisReplyOut_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisReplyOut_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reply"] = _hiredisb.redisReplyOut_b_reply_set
    __swig_getmethods__["reply"] = _hiredisb.redisReplyOut_b_reply_get
    if _newclass:
        reply = _swig_property(_hiredisb.redisReplyOut_b_reply_get, _hiredisb.redisReplyOut_b_reply_set)
    __swig_setmethods__["ret"] = _hiredisb.redisReplyOut_b_ret_set
    __swig_getmethods__["ret"] = _hiredisb.redisReplyOut_b_ret_get
    if _newclass:
        ret = _swig_property(_hiredisb.redisReplyOut_b_ret_get, _hiredisb.redisReplyOut_b_ret_set)

    def __init__(self):
        this = _hiredisb.new_redisReplyOut_b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredisb.delete_redisReplyOut_b
    __del__ = lambda self: None
redisReplyOut_b_swigregister = _hiredisb.redisReplyOut_b_swigregister
redisReplyOut_b_swigregister(redisReplyOut_b)


def redisGetReplyOL_b(c, out):
    return _hiredisb.redisGetReplyOL_b(c, out)
redisGetReplyOL_b = _hiredisb.redisGetReplyOL_b
# This file is compatible with both classic and new-style classes.


