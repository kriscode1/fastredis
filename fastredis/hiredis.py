# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hiredis')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hiredis')
    _hiredis = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hiredis', [dirname(__file__)])
        except ImportError:
            import _hiredis
            return _hiredis
        try:
            _mod = imp.load_module('_hiredis', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hiredis = swig_import_helper()
    del swig_import_helper
else:
    import _hiredis
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class timeval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tv_sec"] = _hiredis.timeval_tv_sec_set
    __swig_getmethods__["tv_sec"] = _hiredis.timeval_tv_sec_get
    if _newclass:
        tv_sec = _swig_property(_hiredis.timeval_tv_sec_get, _hiredis.timeval_tv_sec_set)
    __swig_setmethods__["tv_usec"] = _hiredis.timeval_tv_usec_set
    __swig_getmethods__["tv_usec"] = _hiredis.timeval_tv_usec_get
    if _newclass:
        tv_usec = _swig_property(_hiredis.timeval_tv_usec_get, _hiredis.timeval_tv_usec_set)

    def __init__(self):
        this = _hiredis.new_timeval()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredis.delete_timeval
    __del__ = lambda self: None
timeval_swigregister = _hiredis.timeval_swigregister
timeval_swigregister(timeval)

REDIS_ERR = _hiredis.REDIS_ERR
REDIS_OK = _hiredis.REDIS_OK
REDIS_ERR_IO = _hiredis.REDIS_ERR_IO
REDIS_ERR_OTHER = _hiredis.REDIS_ERR_OTHER
REDIS_ERR_EOF = _hiredis.REDIS_ERR_EOF
REDIS_ERR_PROTOCOL = _hiredis.REDIS_ERR_PROTOCOL
REDIS_ERR_OOM = _hiredis.REDIS_ERR_OOM
REDIS_REPLY_STRING = _hiredis.REDIS_REPLY_STRING
REDIS_REPLY_ARRAY = _hiredis.REDIS_REPLY_ARRAY
REDIS_REPLY_INTEGER = _hiredis.REDIS_REPLY_INTEGER
REDIS_REPLY_NIL = _hiredis.REDIS_REPLY_NIL
REDIS_REPLY_STATUS = _hiredis.REDIS_REPLY_STATUS
REDIS_REPLY_ERROR = _hiredis.REDIS_REPLY_ERROR
class redisReply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisReply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisReply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _hiredis.redisReply_type_set
    __swig_getmethods__["type"] = _hiredis.redisReply_type_get
    if _newclass:
        type = _swig_property(_hiredis.redisReply_type_get, _hiredis.redisReply_type_set)
    __swig_setmethods__["integer"] = _hiredis.redisReply_integer_set
    __swig_getmethods__["integer"] = _hiredis.redisReply_integer_get
    if _newclass:
        integer = _swig_property(_hiredis.redisReply_integer_get, _hiredis.redisReply_integer_set)
    __swig_setmethods__["len"] = _hiredis.redisReply_len_set
    __swig_getmethods__["len"] = _hiredis.redisReply_len_get
    if _newclass:
        len = _swig_property(_hiredis.redisReply_len_get, _hiredis.redisReply_len_set)
    __swig_setmethods__["str"] = _hiredis.redisReply_str_set
    __swig_getmethods__["str"] = _hiredis.redisReply_str_get
    if _newclass:
        str = _swig_property(_hiredis.redisReply_str_get, _hiredis.redisReply_str_set)
    __swig_setmethods__["elements"] = _hiredis.redisReply_elements_set
    __swig_getmethods__["elements"] = _hiredis.redisReply_elements_get
    if _newclass:
        elements = _swig_property(_hiredis.redisReply_elements_get, _hiredis.redisReply_elements_set)
    __swig_setmethods__["element"] = _hiredis.redisReply_element_set
    __swig_getmethods__["element"] = _hiredis.redisReply_element_get
    if _newclass:
        element = _swig_property(_hiredis.redisReply_element_get, _hiredis.redisReply_element_set)

    def __init__(self):
        this = _hiredis.new_redisReply()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredis.delete_redisReply
    __del__ = lambda self: None
redisReply_swigregister = _hiredis.redisReply_swigregister
redisReply_swigregister(redisReply)


def replies_index(replies, index):
    return _hiredis.replies_index(replies, index)
replies_index = _hiredis.replies_index
class redisContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["err"] = _hiredis.redisContext_err_set
    __swig_getmethods__["err"] = _hiredis.redisContext_err_get
    if _newclass:
        err = _swig_property(_hiredis.redisContext_err_get, _hiredis.redisContext_err_set)
    __swig_setmethods__["errstr"] = _hiredis.redisContext_errstr_set
    __swig_getmethods__["errstr"] = _hiredis.redisContext_errstr_get
    if _newclass:
        errstr = _swig_property(_hiredis.redisContext_errstr_get, _hiredis.redisContext_errstr_set)
    __swig_setmethods__["fd"] = _hiredis.redisContext_fd_set
    __swig_getmethods__["fd"] = _hiredis.redisContext_fd_get
    if _newclass:
        fd = _swig_property(_hiredis.redisContext_fd_get, _hiredis.redisContext_fd_set)
    __swig_setmethods__["flags"] = _hiredis.redisContext_flags_set
    __swig_getmethods__["flags"] = _hiredis.redisContext_flags_get
    if _newclass:
        flags = _swig_property(_hiredis.redisContext_flags_get, _hiredis.redisContext_flags_set)
    __swig_setmethods__["obuf"] = _hiredis.redisContext_obuf_set
    __swig_getmethods__["obuf"] = _hiredis.redisContext_obuf_get
    if _newclass:
        obuf = _swig_property(_hiredis.redisContext_obuf_get, _hiredis.redisContext_obuf_set)
    __swig_setmethods__["reader"] = _hiredis.redisContext_reader_set
    __swig_getmethods__["reader"] = _hiredis.redisContext_reader_get
    if _newclass:
        reader = _swig_property(_hiredis.redisContext_reader_get, _hiredis.redisContext_reader_set)
    __swig_setmethods__["connection_type"] = _hiredis.redisContext_connection_type_set
    __swig_getmethods__["connection_type"] = _hiredis.redisContext_connection_type_get
    if _newclass:
        connection_type = _swig_property(_hiredis.redisContext_connection_type_get, _hiredis.redisContext_connection_type_set)
    __swig_setmethods__["timeout"] = _hiredis.redisContext_timeout_set
    __swig_getmethods__["timeout"] = _hiredis.redisContext_timeout_get
    if _newclass:
        timeout = _swig_property(_hiredis.redisContext_timeout_get, _hiredis.redisContext_timeout_set)
    __swig_getmethods__["tcp"] = _hiredis.redisContext_tcp_get
    if _newclass:
        tcp = _swig_property(_hiredis.redisContext_tcp_get)
    __swig_getmethods__["unix_sock"] = _hiredis.redisContext_unix_sock_get
    if _newclass:
        unix_sock = _swig_property(_hiredis.redisContext_unix_sock_get)

    def __init__(self):
        this = _hiredis.new_redisContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredis.delete_redisContext
    __del__ = lambda self: None
redisContext_swigregister = _hiredis.redisContext_swigregister
redisContext_swigregister(redisContext)

class redisContext_unix_sock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisContext_unix_sock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisContext_unix_sock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _hiredis.redisContext_unix_sock_path_set
    __swig_getmethods__["path"] = _hiredis.redisContext_unix_sock_path_get
    if _newclass:
        path = _swig_property(_hiredis.redisContext_unix_sock_path_get, _hiredis.redisContext_unix_sock_path_set)

    def __init__(self):
        this = _hiredis.new_redisContext_unix_sock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredis.delete_redisContext_unix_sock
    __del__ = lambda self: None
redisContext_unix_sock_swigregister = _hiredis.redisContext_unix_sock_swigregister
redisContext_unix_sock_swigregister(redisContext_unix_sock)

class redisContext_tcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisContext_tcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisContext_tcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["host"] = _hiredis.redisContext_tcp_host_set
    __swig_getmethods__["host"] = _hiredis.redisContext_tcp_host_get
    if _newclass:
        host = _swig_property(_hiredis.redisContext_tcp_host_get, _hiredis.redisContext_tcp_host_set)
    __swig_setmethods__["source_addr"] = _hiredis.redisContext_tcp_source_addr_set
    __swig_getmethods__["source_addr"] = _hiredis.redisContext_tcp_source_addr_get
    if _newclass:
        source_addr = _swig_property(_hiredis.redisContext_tcp_source_addr_get, _hiredis.redisContext_tcp_source_addr_set)
    __swig_setmethods__["port"] = _hiredis.redisContext_tcp_port_set
    __swig_getmethods__["port"] = _hiredis.redisContext_tcp_port_get
    if _newclass:
        port = _swig_property(_hiredis.redisContext_tcp_port_get, _hiredis.redisContext_tcp_port_set)

    def __init__(self):
        this = _hiredis.new_redisContext_tcp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredis.delete_redisContext_tcp
    __del__ = lambda self: None
redisContext_tcp_swigregister = _hiredis.redisContext_tcp_swigregister
redisContext_tcp_swigregister(redisContext_tcp)


def redisConnect(ip, port):
    return _hiredis.redisConnect(ip, port)
redisConnect = _hiredis.redisConnect

def redisConnectWithTimeout(ip, port, tv):
    return _hiredis.redisConnectWithTimeout(ip, port, tv)
redisConnectWithTimeout = _hiredis.redisConnectWithTimeout

def redisCommand(c, format):
    return _hiredis.redisCommand(c, format)
redisCommand = _hiredis.redisCommand

def freeReplyObject(reply):
    return _hiredis.freeReplyObject(reply)
freeReplyObject = _hiredis.freeReplyObject

def redisFree(c):
    return _hiredis.redisFree(c)
redisFree = _hiredis.redisFree

def redisAppendCommand(c, format):
    return _hiredis.redisAppendCommand(c, format)
redisAppendCommand = _hiredis.redisAppendCommand
class redisReplyOut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, redisReplyOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, redisReplyOut, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reply"] = _hiredis.redisReplyOut_reply_set
    __swig_getmethods__["reply"] = _hiredis.redisReplyOut_reply_get
    if _newclass:
        reply = _swig_property(_hiredis.redisReplyOut_reply_get, _hiredis.redisReplyOut_reply_set)
    __swig_setmethods__["ret"] = _hiredis.redisReplyOut_ret_set
    __swig_getmethods__["ret"] = _hiredis.redisReplyOut_ret_get
    if _newclass:
        ret = _swig_property(_hiredis.redisReplyOut_ret_get, _hiredis.redisReplyOut_ret_set)

    def __init__(self):
        this = _hiredis.new_redisReplyOut()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hiredis.delete_redisReplyOut
    __del__ = lambda self: None
redisReplyOut_swigregister = _hiredis.redisReplyOut_swigregister
redisReplyOut_swigregister(redisReplyOut)


def redisGetReplyOL(c, out):
    return _hiredis.redisGetReplyOL(c, out)
redisGetReplyOL = _hiredis.redisGetReplyOL
# This file is compatible with both classic and new-style classes.


